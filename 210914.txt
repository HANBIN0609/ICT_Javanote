*****클래스패스*****
 - 절대 경로 : 루트 디렉토리를 시작으로 지정한 경로
 - 상대 경로 : 현재 디렉토리를 기준으로 지정한 경로(' . ' >> 현재경로, ' .. ' >> 이전폴더)

*****패키지(package)*****
 - 패키지는 곧 폴더를 의미함, 폴더는 ' . ' 으로 경로를 지정해줌
 - 클래스명이 같은 객체를 생성하려면 패키지를 구분지어 선언해줘야 한다.
 -  import 패키지명 >>> 해당 패키지의 소스를 기본으로 함
 - 객체 앞 패키지명. >>> 해당 패키지를 해당 객체에만 선언
 - ***패키지 선언할 때 마지막에 * 를 붙여주면 해당 패키지 내 모든 클래스 파일을 선언한다.

☆☆☆☆☆☆☆☆☆☆☆정보은닉과 캡슐화☆☆☆☆☆☆☆☆☆☆☆
 - OOP(객체지향언어, Object Oriented Programming)가 절차지향 언어와 다른 특징
	- 1) 상속 : extends
	- 2) 정보은닉(접근 제한자, access modifier) : hidden information, 클래스안의 변수를 숨겨서 다른 클래스에서의 접근 범위를 제한시킨다.
	- 3) 다형성 : 자바 언어의 70%, 부모 = 자식(feat. 형변환 없이) 
	- 4) 캡슐화 : 소프트웨어의 최종 목적 = 최종 소비자가 가장 쉽게 프로그래밍하도록 클래스 구성하는 것

 - 접근 수준 지시자, 접근 제한자(access modifier)
   - 클래스 정의 대상 : public, default
   - 인스턴스 변수, 메소드 대상 : public protected, default, private		
   - 지시자 사용범위(접근범위)
	- public : 패키지가 다 달라도 어디서든 사용가능. 하나의 파일 안에 클래스가 두개 이상일 때 public class는 하나만 가능.
	- protected :  
	- default(앞에 아무것도 붙이지 않은 것) : 패키지와 관련. 같은 패키지 내에서만 사용가능.
	- private : 해당 변수와 메소드의 사용 범위가 같은 클래스 내로 제한됨. 꼭꼭꼭 써야함, 실무에서 매우 중요.

*****콘솔 입력*****
 - Scanner 클래스
  - 입력을 위한 클래스(반대로 출력을 위한 클래스는 print)
  - int nextInt()
  - byte nextByte()
  - String nextLine()
  - double nextDouble()
  - boolean nextBoolean()
