StringBuilder 와 StringBuffer
 - 기본적으로 이 두개는 같은 것임(생성자를 포함한 메소드의 수, 메소드의 기능, 메소드의 이름과 매개변수 선언. 이 세가지가 일치함)
 - String은 immutable, StringBuilder와 StringBuffer는 mutable
 - 메모리를 따로 생성하지 않고 갖다 붙이는 형식으로 사용. 그래서 처리속도가 빠름
	- 그냥 + 연산을 해도 출력결과는 같을 수 있으나 반복횟수가 많아지게되면 
	  빌더를 사용하는게 훨씬 처리속도면에서 빠르고 좋다.

 *** 사용 방법의 예
	public static void main(String[] args) {
		StringBuilder stbuf = new StringBuilder("123");
		
		stbuf.append(45678); // 문자열 덧붙이기
		System.out.println(stbuf.toString());

		stbuf.delete(0, 2); // 문자열 일부 삭제
		System.out.println(stbuf.toString());
		
		stbuf.replace(0, 3, "AB"); // 문자열 일부 교체
		System.out.println(stbuf.toString());
		
		stbuf.reverse(); // 문자열 내용 뒤집기
		System.out.println(stbuf.toString());
		
		String sub = stbuf.substring(2, 4); // 일부만 문자열로 변환
		System.out.println(sub);
	}
 - stbuf라는 객체를 선언했을 때
	- stbuf.toString( ); >>> 해당 값을 String으로 리턴해준다. (object)

★★★★★★★★★★★★★★★★★배열(array)★★★★★★★★★★★★★★★★★
 - 1차원 배열의 이해와 선언 방법
	- 1차원 배열 : 타입이 같은 둘 이상의 데이터를 저장할 수 있는 1차원 구조의 메모리 공간
	- 선언 방법 
		- int[] ref = new int[5]; >> 길이가 5인 int형 배열 선언
		- int ref[] = new int[5]; >> 위와 같음
	- 배열은 메모리에서 연속된 공간을 차지함***

- 배열 생성과 동시에 초기화 >>> 배열은 중괄호로 값을 넣는다
	// 길이가 3인 배열생성, int[] arr = new int[3];
	// 배열생성 및 초기화1, int[] arr = new int[] {1, 2, 3};
	// 배열생성 및 초기화2, int[] arr = {1, 2, 3};

김예원
int [] ar = {300, 17, 450, 180, 505}
배열의 값 중 최대값과 최소값을 입력하면 최대값 + 최소값의 연산값이 출력되는 객체를 생성
출력형태-----------------------------------
300, 17, 450, 180, 505 중
가장 큰 수 : _505
가장 작은 수 : _17
최대값 + 최소값 = 522 입니다.

잘못입력했을시------------------------------
가장 큰 수: _505