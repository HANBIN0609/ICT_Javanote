*****메소드 오버로딩과 String 클래스

- 호출된 메소드를 찾을 때 참조하게 되는 두 가지 정보
	- 메소드의 이름
	- 메소드의 매개변수 정보

- 메소드(함수) 오버로딩?
 - 같은 함수 이름으로 파라미터 타입과 개수를 달리 해서 만드는 것. (ex) print함수)
	- 매개변수의 수가 다르면 성립
	- 매개변수의 형이 다르면 성립
	- 반환형이 다른 것은 성립 조건이 아님
	- println 메소드가 다양한 인자를 받을 수 있는 이유는 메소드 오버로딩

- 키워드 this를 이용한 다른 생성자의 호출
	- this( ); >>> 생성자 호출
	- this.인스턴스 변수
	- 

- String 인스턴스 생성의 두 가지 방법 및 차이점
	- " "로 직접 생성 : 하나의 메모리 번지수에 생성해서 개수를 여러개 생성해도 문자열의
			내용이 같으면 컴파일러가 참조 값이 동일하다고 판단.
	- new String( ); 으로 객체 생성 : 여러개 생성하면 객채 생성이기 때문에 생성할 때 마다 
				     다른 주소가 생성된다.

- String 인스턴스는 Immutable 인스턴스(변하지 않는 인스턴스)
	- String은 한번 공간을 잡아놓게 되면 그 공간을 변경할 수 없다. 
	- ex) String str1 = "Simple String"; 
	       String str2 = "Simple String"; >>> str1과 str2의 참조값은 같다.

	       String str3 = str1 + str1; >>> 원래의 str1에다가 또 str1을 붙이는게 아니라 새로운 공간을 잡아 
				          str1 값을 복사해 넣어서 연산한다.
	- 즉, immutable의 의미는 원본 데이터를 함부로 바꿀 수 없다는 뜻에서 변하지 않는다는 뜻을 가진다.

- 문자열 연결시키기
	- .concat( ); >>> 이 함수를 사용해서 앞 문자열에 들어오는 인자를 붙임
	- concat메소드는 이어서 호출가능

- 문자열의 일부추출
	- .substring(n); >>> n1 이하의 문자열 추출
	- substring(n1 ,n2); >>> n1 이상 n2 미만의 문자열 추출

- 기본 자료형의 값을 문자열로 바꾸기
	- static String valueOf(boolean b)
	- static String valueOf(char c)
	- static String valueOf(double d)
	- static String valueOf(float f)
	- static String valueOf(int i)
	- static String valueOf(long l)
	*****ex) double e = 2.718281;
	           String se = String.valueOf(e);	

- 문자열 대상 +연산과 +=연산
	- 컴파일러에 의해 자동으로 변환된다.
		- + 연산: ~.concat()
		- += 연산 : ~ = ~.concat()

- 문자열과 기본 자료형의 연산
	- 컴파일러에 의해 자동으로 변환된다.
	ex) String str = "age" + 1; >>> String str = "age".concat(String.valueOf(1));
	    >>> 컴파일러가 내부적으로 정수를 문자열로 바꾸고 문자열 연산을 이룸.

