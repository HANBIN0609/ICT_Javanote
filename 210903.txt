부호 연산자
- ' - ' : 변수에 저장된 값의 부호를 바꿔 반환함

증가 감소 연산자
- '++' : 피연산자에 저장된 값을 1 증가
- '--' : 피연산자에 저장된 값을 1 감소
- prefix, postfix
  - prefix : 전위 연산자, 출력하기전에 연산진행
  - postfix : 후위 연산자, 출력하고나서 연산진행

비트 연산자(&, |, ^, ~)
- 각각의 비트를 대상으로 연산 진행, 각 비트를 대상으로 진행된 연산결과를 묶어서 하나의 연산결과 반환
	byte n1 = 13;
	byte n2 = 7;
	byte n3 = (byte)(n1 & n2);
	System.out.println(n3);
>>>>>출력값 5
>>>>> 13 은 비트로 00001101
>>>>> 7은 비트로   00000111
>>>>>각 비트자리를 연산해서 하나라도 0이 있으면 0 을 넣음
>>>>>결과값은 00000101 : 5
- & : and, 비트값이 둘 다 1이어야 1반환 
- | : or, 비트값이 하나라도 1이면 1반환
- ^ : xor, 비트값이 다르면 1반환
- ~ : not, 비트값을 반전, 0은 1로, 1은 0으로 반환

비트 쉬프트 연산자
- >> : 값을 2의 n제곱만큼 나눔
- << : 값을 2의 n제곱만큼 증가

★★★★★★★★ if와 else ★★★★★★★★
- 형태 
  if (조건문) {
	조건이 true시 실행되는 영역
} else {
	조건이 false시 실행되는 영역
}
- if 실행문이 한 문장일 경우에만 해당 실행문 중괄호 생략가능.
- if ~ else if~ else문 형태
   if (조건문) {
	조건이 true시 실행되는 영역
} else if{
	첫 조건이 false시 실행되는 영역
} else {
	두 번째 조건이 false시 실행되는 영역
}

삼항 연산자
- 형태 : 
 변수 : (조건) ? 참일 경우 반환값 : 거짓일 경우 반환값 ;

★★★★★★★★ switch와 break ★★★★★★★★
- switch문의 기본 구성(switch문도 조건문 중 하나임)
 switch(n) {
	case 1:		n이 1이면 여기서부터 실행
		. . .
	case 2:		n이 2이면 여기서부터 실행
		. . .
	case 3:		n이 3이면 여기서부터 실행		
		. . .
	default:		해당하는 case 없으면 여기서부터 실행
		. . . 
}
- case와 default는 레이블! 따라서 실행 위치를 표시하는 용도로 사용될 뿐.
- *****switch문은 걸리면 걸린곳부터 break까지












