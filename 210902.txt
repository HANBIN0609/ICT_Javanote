210902_3강

자바에서 문자가 뿌려지는 원리?(char)
- 문자와 숫자의 일대일 매칭(유니코드)
- ex) A = 65, B = 66 >>> 컴파일러가 문자를 숫자로 바꿈(문자를 숫자로 : 인코딩, 숫자를 문자로 : 디코딩)
- char ch = 65; >>> 출력하면 문자 "A" 가 나옴
- 아스키코드(ASCII)
  - 영어만 정의했음
  - 그래서 기존 아스키코드에 한글, 중국어, 일본어 등 여러 언어를 추가함
  - 그렇게 나온 언어가 "유니코드"(UTF-8, UTF-16, 현재는 UTF-8로 통일), 자바는 유니코드를 사용함.
  * 글자가 깨지는 이유? 
     >>> 유니코드로 문자코딩을 했으나 다른 코드를 지원하는 프로그램에서 해당 문자를 나타냈을 경우

모든 프로그래밍은 자기가 가지고 있는 데이터 타입으로 메모리를 잡고 입출력을 수행한다.

자바에서 말하는 "상수"(Constants)
 - 변수에 값을 딱 한번만 할당할 수 있음
 - 할당된 값은 변경이 불가능.
 - 초기화? >>> 값을 첫번째로 할당하는 행위

final 기반 상수선언
 - 상수의 이름은 모두 대문자로.
 - 이름이 둘 이상의 단어로 이뤄질 경우 단어를 언더바로 연결함.
* 프로그래밍 할 때 어떤 것을 상수로, 변수로 둬야할 지 센스있게 정하는 것이 중요!

리터럴(Literals)의 이해
 - 자료형을 기반으로 표현되는 상수 >>> ex) int num1 = 5 + 7; , double num2 = 3.3 + 4.5;
 - 정수는 무조건 int형으로 인식하기로 되어있음.
 - 그래서 5와 7은 "정수형 리터럴"
 - 그리고 3.3과 4.5는 "실수형 리터럴"

long형 리터럴의 표현 방법
 - System.out.println(3147483647 + 3147483647); >>> 컴파일 시 Integer number too large라는 오류 메시지를 전달한다.	
 - System.out.println(3147483647L + 3147483647L); >>> 숫자뒤에 l 혹은 L을 붙여서 long형으로 요청

숫자에 언더바 삽입?
 - 큰 숫자를 읽기 쉽게 하기 위해 >>> int num = 100_000_000;

실수형 리터럴
 - System.out.println(3.1235D + 3.1234D); >>> double형
 - System.out.println(3.1235F + 3.1234F); >>> float형

실수형 상수 e
 - 3.4e3 >>> 3.4 x 10의 세제곱
 - 3.4e-3>>> 3.4 x 10의 마이너스세제곱
 - 제곱수를 표현못해서 지원하는 형태

이스케이프 시퀀스(escape sequences)
 - 앞에 공통으로 백슬래시 들어감
 - '\b' : 백스페이스 문자
 - '\t' : 탭 문자
 - '\'' : 작은따옴표 문자
 - '\"' : 큰따옴표 문자


★형 변환★ 중요함
 - 형 변환이 언제 일어나는가? >>> 대입과 연산(두개의 데이터 타입이 다른 경우)
 - ☆ 알아야 할 대전제 : CPU는 연산시 두개의 데이터 타입이 일치해야만 연산을 할 수 있음.
 - ★ 형 변환 : 데이터 타입이 변환됨(자동 형 변환, 명시적 형 변환)
 ↓↓↓↓↓예시와 설명↓↓↓↓↓
 - int num1 = 50;
   long num2 = 3147483764L;
   System.out.println(num1 + num2);
 >>> num1에 저장된 값이 long형으로 형 변환 된다.(자동 형 변환)
 >>> 두 피연산자의 자료형이 일치해야 동일한 방법을 적용하여 연산할 수 있음
 >>> 피연산자의 자료형이 일치하지 않을 때, 형 변환(casting)을 통해 일치시켜야 함

 - int보다 작은 데이터 타입(byte, short, char)은 무조건 int로 변환됨.
 - 실수와 정수의 연산이 나오면 실수가 우선함. 정수형을 실수형으로 바꿈.(소수점을 보존하는 형식)

 - ★ 명시적 형 변환(Explicit Conversion) : 자동 형 변환 규칙에 부합하지는 않지만 필요한 상황이면 명시적 형 변환을 진행함.
 - 형태는 앞에 (형)을 넣어줌 >>> ex) double pi = 3.1415;
			          int wholeNumber = (int)pi;
			>>> Project_0902의 Test08의 예시, 210902_명시적형변환 사진 예시

※※※※※※참고(형변환)※※※※※※
 ```java
    public class Hello {
    	public static void main(String[] args) {
    	
    		// 참고
    		int num = '가';		
    		System.out.println(num);          //44032

    		System.out.println('가' + '가');    //88064 
    		System.out.println('가' - '가');    //0
    		System.out.println('가');		  //가
    		System.out.println('5');		   //5
    		System.out.println('5' + '5');    //106
    		System.out.println('5' - '5');    //0
    		System.out.println("가" + "가");   //가가
    		//int로 형변환해서 계산된다.
    		
    		//참고
    		int num = '확';
    		System.out.println(num); //54869

    		int a = 1 + 1; 
    		int ch7 = '확' + '확';
    		System.out.println(a);         //2
    		System.out.println(ch7);       //109738
    	}
    }
    ```



